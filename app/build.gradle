/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'jacoco'
}
javafx {
    version = "12.0.2"
    modules = [ 'javafx.controls' ]
}
repositories {
    // Use Maven Central for resolving dependencies.

    mavenCentral()
}

dependencies {
    implementation 'mysql:mysql-connector-java:8.0.22'
    implementation 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.3.3'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation platform('com.google.cloud:libraries-bom:23.0.0')

    implementation 'com.google.cloud:google-cloud-storage'
}
jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
application {
    // Define the main class for the application.
    mainClass = 'project1.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
run{
    standardInput = System.in
}
test {
    testLogging {
        showStandardStreams = true
    }
}

